/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if (k == 1) return head;
        int count = 0;
        ListNode sentinel = new ListNode(0);
        sentinel.next = head;
        ListNode current = sentinel;
        while (true) {
            ListNode node1 = current;
            count = 0;
            while (node1.next != null) {
                node1 = node1.next;
                count++;
                if (count >= k) break;
            }
            if (count >= k) {
                ListNode nodek = current.next;
                ListNode p1 = current.next;
                ListNode p2 = current.next.next;
                ListNode temp = null;
                for (int i = 0; i < k-1; i++) {
                    temp = p2.next;
                    p2.next = p1;
                    p1 = p2;
                    p2 = temp;
                }
                current.next = node1;
                nodek.next = temp;
                current = nodek;
            }
            else break;
        }
        return sentinel.next;
    }
}
